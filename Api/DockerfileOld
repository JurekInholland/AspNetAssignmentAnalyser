FROM node:16-alpine AS vite_build
WORKDIR /app
COPY "./ui" "."
RUN npm install
RUN npm run build

FROM mcr.microsoft.com/dotnet/aspnet:7.0.3 AS base

RUN apt update && apt install -y  \
 xvfb \
 apt-transport-https \
 ca-certificates \
 curl \
 gnupg \
 hicolor-icon-theme \
 libcanberra-gtk* \
 libgl1-mesa-dri \
 libgl1-mesa-glx \
 libpango1.0-0 \
 libpulse0 \
 libv4l-0 \
 fonts-symbola \
 --no-install-recommends \
&& curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
&& echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list \
&& apt-get update && apt-get install -y \
google-chrome-stable \
--no-install-recommends \
&& apt-get purge --auto-remove -y curl \
&& rm -rf /var/lib/apt/lists/*
ENV DISPLAY=:1
#RUN apt-get update
#RUN apt-get install -y xvfb
#RUN echo "deb http://deb.debian.org/debian/ unstable main contrib non-free" >> /etc/apt/sources.list.d/debian.list
#RUN apt-get update
#RUN apt-get install -y libcrypt1
#RUN apt-get install -y firefox
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build



# Install Chrome
#https://stackoverflow.com/a/66308064
#RUN apt-get update && apt-get install -y \
#apt-transport-https \
#ca-certificates \
#curl \
#gnupg \
#hicolor-icon-theme \
#libcanberra-gtk* \
#libgl1-mesa-dri \
#libgl1-mesa-glx \
#libpango1.0-0 \
#libpulse0 \
#libv4l-0 \
#fonts-symbola \
#--no-install-recommends \
#&& curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
#&& echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list \
#&& apt-get update && apt-get install -y \
#google-chrome-stable \
#--no-install-recommends \
#&& apt-get purge --auto-remove -y curl \
#&& rm -rf /var/lib/apt/lists/*

WORKDIR /src
COPY ["Api/Api.csproj", "Api/"]
RUN dotnet restore "Api/Api.csproj"
COPY . .
WORKDIR "/src/Api"
RUN dotnet build "Api.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Api.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
COPY --from=vite_build /app/dist ./wwwroot
#ENTRYPOINT ["/bin/sh", "-c", "/usr/bin/xvfb-run -a $@", ""]
ENTRYPOINT ["dotnet", "Api.dll"]
